import sharp from 'sharp';
import path from 'path';
import fs from 'fs/promises';

const imageName = 'hugues-de-buyer-mimeure-lQPEChtLjUo-unsplash-small.jpg';

const buildVersion = '0.0.1';
const appname = 'IMAGE-BUILD';
const assetsPath = './static/assets';
const generatedPath = './static/generated';
const generatedUrl = './generated';
const atlasFilePath = './assets/js/images.js';

const atlasHeader = '/* This file is auto-generated by image-build.mjs */\r\nmodule.exports=';

const atlas = {
  buildVersion,
  images: []
};

const configs = [
  {
    name: 'large',
    type: 'webp',
    width: 1350,
    format: {
      quality: 75,
      smartSubsample: true,
      effort: 6
    }
  },
  {
    name: 'medium',
    type: 'jpeg',
    width: 675,
    format: {
      quality: 50,
      chromaSubsampling: '4:2:0'
    }
  },
  {
    name: 'thumb',
    type: 'webp',
    width: 60,
    format: {
      quality: 50,
      smartSubsample: true,
      effort: 5
    }
  }
];

const settings = {
  configs
};

async function execute() {
  const args = process.argv;
  log('Starting');
  if (args.length > 2) {
    // parse commands
  }

  try {
    try {
      await fs.access(generatedPath);
      log('Deleting generated folder');
      await fs.rm(generatedPath, { recursive: true });
    } catch {
      // ignore error
    }

    await fs.mkdir(generatedPath);

    try {
      await fs.access(atlasFilePath);
      log('Deleting atlas file');
      await fs.rm(atlasFilePath, { recursive: true });
    } catch {
      // ignore error
    }

    log('Fetching images');
    await processImages(assetsPath);

    const uniquePaths = [];

    for (let image of atlas.images) {
      if (!uniquePaths.includes(image.relativePath)) {
        uniquePaths.push(image.relativePath);
      }
    }

    for (let path of uniquePaths) {
      // make folders
      const outputPath = `${generatedPath}/${path}`;
      try {
        await fs.access(outputPath);
      } catch {
        log('make directory ' + outputPath);
        await fs.mkdir(outputPath, { recursive: true });
      }
    }

    log('Processing images');
    const promises = [];
    atlas.images.map((image) => {
      promises.push(convertImage(image));
    });

    await Promise.all(promises);

    log('Saving atlas file');
    await writeAtlas(atlas, atlasFilePath);
  } catch (ex) {
    console.error('ERROR OCCURRED');
    console.error(ex);
  }

  log('FINISHED');
}

function log(str) {
  // eslint-ignore no-comment
  console.log(`${appname}: ${str}`);
}

async function processImages(directoryPath, relativePath = '') {
  try {
    const files = await fs.readdir(directoryPath, { withFileTypes: true });
    for (const file of files) {
      const filePath = path.join(directoryPath, file.name);
      const relativeFilePath = path.join(relativePath, file.name);
      if (file.isDirectory()) {
        await processImages(filePath, relativeFilePath);
      } else if (isImageFile(file.name)) {
        atlas.images.push({
          name: file.name.split('.')[0],
          relativePath: relativePath.replaceAll('\\', '/'),
          src: `${assetsPath}/${relativeFilePath.replaceAll('\\', '/')}`
        });
      }
    }
  } catch (error) {
    console.error('Error processing images:', error);
  }
}

function isImageFile(fileName) {
  return /\.(jpg|jpeg|png|gif|bmp|webp)$/i.test(fileName);
}

async function writeAtlas(atlas, filePath) {
  try {
    for (let image of atlas.images) {
      delete image.relativePath;
    }

    let jsonString = JSON.stringify(atlas, null, 2);
    jsonString = jsonString.replace(/\.?\/static/g, '');
    await fs.writeFile(filePath, atlasHeader + jsonString);
  } catch (error) {
    console.error('Error writing Atlas file:', error);
  }
}

async function convertImage(image) {
  try {
    const fileStats = await fs.stat(image.src);
    const originalSize = fileStats.size;
    image.size = originalSize;

    const metadata = await sharp(image.src).metadata();
    image.width = metadata.width;
    image.height = metadata.height;

    const outputPath = `${generatedPath}/${image.relativePath}`;

    image.generated = {};

    const promises = [];

    for (let configIdx = 0; configIdx < configs.length; configIdx++) {
      const currentConfig = { ...settings.configs[configIdx] };
      const currentFormat = { ...currentConfig.format };

      image.generated[currentConfig.name] = {};

      if (currentConfig.type === 'png') {
        currentFormat.compressionLevel = (100 - currentFormat.quality) / 10;
        delete currentFormat.quality;
      } else {
        currentFormat.quality = currentFormat.quality;
      }

      let width = currentConfig.width < image.width ? currentConfig.width : image.width;

      const sharpImage = sharp(image.src).resize(width).toFormat(currentConfig.type, currentFormat);

      image.generated[currentConfig.name].url = `${outputPath.substring(1)}/${image.name}_${currentConfig.name}.${
        currentConfig.type
      }`;

      if (currentConfig.name === 'thumb') {
        let outputImage = await sharpImage.toBuffer();
        const outputMetadata = await sharp(outputImage).metadata();
        image.generated[currentConfig.name].width = outputMetadata.width;
        image.generated[currentConfig.name].height = outputMetadata.height;
        image.generated[currentConfig.name].size = outputImage.length;
        outputImage = `data:image/${currentConfig.type};base64,` + outputImage.toString('base64');
        image.generated[currentConfig.name].data = outputImage;
      } else {
        const outputFilePath = `${outputPath}/${image.name}_${currentConfig.name}.${currentConfig.type}`;
        await sharpImage.toFile(outputFilePath);

        const outputMetadata = await sharp(outputFilePath).metadata();
        const outputStats = await fs.stat(outputFilePath);
        image.generated[currentConfig.name].width = outputMetadata.width;
        image.generated[currentConfig.name].height = outputMetadata.height;
        image.generated[currentConfig.name].size = outputStats.size;
      }
    }

    await Promise.all(promises);
  } catch (ex) {
    console.error('FAILED TO CONVERT IMAGE');
    console.error(ex);
  }
}

/* run the program */
await execute();
